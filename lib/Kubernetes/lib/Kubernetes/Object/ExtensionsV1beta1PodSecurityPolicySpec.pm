=begin comment

Kubernetes

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1.14.6

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package Kubernetes::Object::ExtensionsV1beta1PodSecurityPolicySpec;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use Kubernetes::Object::ExtensionsV1beta1AllowedCSIDriver;
use Kubernetes::Object::ExtensionsV1beta1AllowedFlexVolume;
use Kubernetes::Object::ExtensionsV1beta1AllowedHostPath;
use Kubernetes::Object::ExtensionsV1beta1FSGroupStrategyOptions;
use Kubernetes::Object::ExtensionsV1beta1HostPortRange;
use Kubernetes::Object::ExtensionsV1beta1RunAsGroupStrategyOptions;
use Kubernetes::Object::ExtensionsV1beta1RunAsUserStrategyOptions;
use Kubernetes::Object::ExtensionsV1beta1SELinuxStrategyOptions;
use Kubernetes::Object::ExtensionsV1beta1SupplementalGroupsStrategyOptions;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#PodSecurityPolicySpec defines the policy enforced. Deprecated: use PodSecurityPolicySpec from policy API Group instead.
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

Kubernetes

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1.14.6

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "Kubernetes::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'PodSecurityPolicySpec defines the policy enforced. Deprecated: use PodSecurityPolicySpec from policy API Group instead.',
                                  class => 'ExtensionsV1beta1PodSecurityPolicySpec',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'allow_privilege_escalation' => {
        datatype => 'boolean',
        base_name => 'allowPrivilegeEscalation',
        description => 'allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.',
        format => '',
        read_only => '',
            },
    'allowed_csi_drivers' => {
        datatype => 'ARRAY[ExtensionsV1beta1AllowedCSIDriver]',
        base_name => 'allowedCSIDrivers',
        description => 'AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value means no CSI drivers can run inline within a pod spec.',
        format => '',
        read_only => '',
            },
    'allowed_capabilities' => {
        datatype => 'ARRAY[string]',
        base_name => 'allowedCapabilities',
        description => 'allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author&#39;s discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.',
        format => '',
        read_only => '',
            },
    'allowed_flex_volumes' => {
        datatype => 'ARRAY[ExtensionsV1beta1AllowedFlexVolume]',
        base_name => 'allowedFlexVolumes',
        description => 'allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \&quot;volumes\&quot; field.',
        format => '',
        read_only => '',
            },
    'allowed_host_paths' => {
        datatype => 'ARRAY[ExtensionsV1beta1AllowedHostPath]',
        base_name => 'allowedHostPaths',
        description => 'allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.',
        format => '',
        read_only => '',
            },
    'allowed_proc_mount_types' => {
        datatype => 'ARRAY[string]',
        base_name => 'allowedProcMountTypes',
        description => 'AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.',
        format => '',
        read_only => '',
            },
    'allowed_unsafe_sysctls' => {
        datatype => 'ARRAY[string]',
        base_name => 'allowedUnsafeSysctls',
        description => 'allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \&quot;*\&quot; in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.  Examples: e.g. \&quot;foo/*\&quot; allows \&quot;foo/bar\&quot;, \&quot;foo/baz\&quot;, etc. e.g. \&quot;foo.*\&quot; allows \&quot;foo.bar\&quot;, \&quot;foo.baz\&quot;, etc.',
        format => '',
        read_only => '',
            },
    'default_add_capabilities' => {
        datatype => 'ARRAY[string]',
        base_name => 'defaultAddCapabilities',
        description => 'defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.',
        format => '',
        read_only => '',
            },
    'default_allow_privilege_escalation' => {
        datatype => 'boolean',
        base_name => 'defaultAllowPrivilegeEscalation',
        description => 'defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.',
        format => '',
        read_only => '',
            },
    'forbidden_sysctls' => {
        datatype => 'ARRAY[string]',
        base_name => 'forbiddenSysctls',
        description => 'forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \&quot;*\&quot; in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.  Examples: e.g. \&quot;foo/*\&quot; forbids \&quot;foo/bar\&quot;, \&quot;foo/baz\&quot;, etc. e.g. \&quot;foo.*\&quot; forbids \&quot;foo.bar\&quot;, \&quot;foo.baz\&quot;, etc.',
        format => '',
        read_only => '',
            },
    'fs_group' => {
        datatype => 'ExtensionsV1beta1FSGroupStrategyOptions',
        base_name => 'fsGroup',
        description => '',
        format => '',
        read_only => '',
            },
    'host_ipc' => {
        datatype => 'boolean',
        base_name => 'hostIPC',
        description => 'hostIPC determines if the policy allows the use of HostIPC in the pod spec.',
        format => '',
        read_only => '',
            },
    'host_network' => {
        datatype => 'boolean',
        base_name => 'hostNetwork',
        description => 'hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.',
        format => '',
        read_only => '',
            },
    'host_pid' => {
        datatype => 'boolean',
        base_name => 'hostPID',
        description => 'hostPID determines if the policy allows the use of HostPID in the pod spec.',
        format => '',
        read_only => '',
            },
    'host_ports' => {
        datatype => 'ARRAY[ExtensionsV1beta1HostPortRange]',
        base_name => 'hostPorts',
        description => 'hostPorts determines which host port ranges are allowed to be exposed.',
        format => '',
        read_only => '',
            },
    'privileged' => {
        datatype => 'boolean',
        base_name => 'privileged',
        description => 'privileged determines if a pod can request to be run as privileged.',
        format => '',
        read_only => '',
            },
    'read_only_root_filesystem' => {
        datatype => 'boolean',
        base_name => 'readOnlyRootFilesystem',
        description => 'readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.',
        format => '',
        read_only => '',
            },
    'required_drop_capabilities' => {
        datatype => 'ARRAY[string]',
        base_name => 'requiredDropCapabilities',
        description => 'requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.',
        format => '',
        read_only => '',
            },
    'run_as_group' => {
        datatype => 'ExtensionsV1beta1RunAsGroupStrategyOptions',
        base_name => 'runAsGroup',
        description => '',
        format => '',
        read_only => '',
            },
    'run_as_user' => {
        datatype => 'ExtensionsV1beta1RunAsUserStrategyOptions',
        base_name => 'runAsUser',
        description => '',
        format => '',
        read_only => '',
            },
    'se_linux' => {
        datatype => 'ExtensionsV1beta1SELinuxStrategyOptions',
        base_name => 'seLinux',
        description => '',
        format => '',
        read_only => '',
            },
    'supplemental_groups' => {
        datatype => 'ExtensionsV1beta1SupplementalGroupsStrategyOptions',
        base_name => 'supplementalGroups',
        description => '',
        format => '',
        read_only => '',
            },
    'volumes' => {
        datatype => 'ARRAY[string]',
        base_name => 'volumes',
        description => 'volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use &#39;*&#39;.',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'allow_privilege_escalation' => 'boolean',
    'allowed_csi_drivers' => 'ARRAY[ExtensionsV1beta1AllowedCSIDriver]',
    'allowed_capabilities' => 'ARRAY[string]',
    'allowed_flex_volumes' => 'ARRAY[ExtensionsV1beta1AllowedFlexVolume]',
    'allowed_host_paths' => 'ARRAY[ExtensionsV1beta1AllowedHostPath]',
    'allowed_proc_mount_types' => 'ARRAY[string]',
    'allowed_unsafe_sysctls' => 'ARRAY[string]',
    'default_add_capabilities' => 'ARRAY[string]',
    'default_allow_privilege_escalation' => 'boolean',
    'forbidden_sysctls' => 'ARRAY[string]',
    'fs_group' => 'ExtensionsV1beta1FSGroupStrategyOptions',
    'host_ipc' => 'boolean',
    'host_network' => 'boolean',
    'host_pid' => 'boolean',
    'host_ports' => 'ARRAY[ExtensionsV1beta1HostPortRange]',
    'privileged' => 'boolean',
    'read_only_root_filesystem' => 'boolean',
    'required_drop_capabilities' => 'ARRAY[string]',
    'run_as_group' => 'ExtensionsV1beta1RunAsGroupStrategyOptions',
    'run_as_user' => 'ExtensionsV1beta1RunAsUserStrategyOptions',
    'se_linux' => 'ExtensionsV1beta1SELinuxStrategyOptions',
    'supplemental_groups' => 'ExtensionsV1beta1SupplementalGroupsStrategyOptions',
    'volumes' => 'ARRAY[string]'
} );

__PACKAGE__->attribute_map( {
    'allow_privilege_escalation' => 'allowPrivilegeEscalation',
    'allowed_csi_drivers' => 'allowedCSIDrivers',
    'allowed_capabilities' => 'allowedCapabilities',
    'allowed_flex_volumes' => 'allowedFlexVolumes',
    'allowed_host_paths' => 'allowedHostPaths',
    'allowed_proc_mount_types' => 'allowedProcMountTypes',
    'allowed_unsafe_sysctls' => 'allowedUnsafeSysctls',
    'default_add_capabilities' => 'defaultAddCapabilities',
    'default_allow_privilege_escalation' => 'defaultAllowPrivilegeEscalation',
    'forbidden_sysctls' => 'forbiddenSysctls',
    'fs_group' => 'fsGroup',
    'host_ipc' => 'hostIPC',
    'host_network' => 'hostNetwork',
    'host_pid' => 'hostPID',
    'host_ports' => 'hostPorts',
    'privileged' => 'privileged',
    'read_only_root_filesystem' => 'readOnlyRootFilesystem',
    'required_drop_capabilities' => 'requiredDropCapabilities',
    'run_as_group' => 'runAsGroup',
    'run_as_user' => 'runAsUser',
    'se_linux' => 'seLinux',
    'supplemental_groups' => 'supplementalGroups',
    'volumes' => 'volumes'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
